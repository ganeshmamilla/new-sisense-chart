import React, { useEffect, useState, useRef } from "react";
import { Filter, filterFactory } from "@sisense/sdk-data";
import Countrydata from "../API/Countrydata";
import * as DM from "../Connected/sample-ecommerce-autogenerated";
type Attribute = {
  [key: string]: any;
};

interface CountryListProps {
  countryFilter: Filter[] | null;
  onSelect?: (country: string[]) => void;
  onUpdateCountryFilter: (filter: Filter[]) => void;
}

export default function CountryList({
  onSelect,
  onUpdateCountryFilter,
}: CountryListProps) {
  
  const [selectedCountry, setSelectedCountry] = useState<string[]>([]);
  const [countryAttribute, setCountryAttribute] = useState<Attribute | null>(
    null
  );
  const [selectAllChecked, setSelectAllChecked] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState<string>("");

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("click", handleClickOutside);

    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, []);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
    e.stopPropagation();
  };

  const getData = async () => {
    const data = await Countrydata();
    if (data) {
      setCountryAttribute(data);
    }
  };
  useEffect(() => {
    getData();
  }, []);
  const countries = countryAttribute || [];

  const handleSelect = (country: string) => {
    console.log("Selected Option:", country);
    const updatedSelection = selectedCountry.includes(country)
      ? selectedCountry.filter((c) => c !== country)
      : [...selectedCountry, country];
    setSelectedCountry(updatedSelection);
    if (onSelect) {
      onSelect(updatedSelection);
    }
  };

  const handleSelectAll = () => {
    setSelectAllChecked(!selectAllChecked);
    const allCountries = countries.map((country: string) => country);
    if (selectAllChecked) {
      setSelectedCountry([]);
      onUpdateCountryFilter([]);
    } else {
      setSelectedCountry(allCountries);
      onUpdateCountryFilter([
        filterFactory.members(DM.Country.Country, allCountries),
      ]);
    }
  };

  let labelDisplay =
    selectedCountry.length > 0 ? selectedCountry.join(", ") : "Select";

  if (labelDisplay.length > 0 && labelDisplay.length > 20) {
    labelDisplay = labelDisplay.substring(0, 20) + "...";
  }

  return (
    <>
      <div className="filter">
        <div
          className={`select ${isOpen ? "open" : ""}`}
          style={{ width: "200px", fontSize: "smaller" }}
          onClick={toggleDropdown}
          ref={dropdownRef}
        >
          <option value="">
            {labelDisplay || "Select"}
            <div style={{ marginLeft: "100px" }}>
              {" "}
              <span className="arrow">&#9662;</span>
            </div>
          </option>
          {isOpen && (
            <>
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  paddingLeft: "10px",
                }}
              >
                <input
                  type="checkbox"
                  checked={selectAllChecked}
                  onChange={handleSelectAll}
                  onClick={(e) => e.stopPropagation()}
                />
                <input
                  type="text"
                  placeholder="Search..."
                  value={searchTerm}
                  onChange={handleSearch}
                  onClick={(e) => e.stopPropagation()}
                  style={{
                    marginLeft: "10px",
                    fontSize: "90%",
                    backgroundColor: "#fff",
                    width:"160px"
                  }}
                />
              </div>
              <div
                className="options-container"
                style={{ paddingLeft: "10px" , paddingTop:"10px",paddingBottom:"10px"}}
              >
                {countries
                  .filter((country: string) =>
                    country.toLowerCase().includes(searchTerm.toLowerCase())
                  )
                  .map((country: string) => (
                    <div key={country}>
                      <input
                        type="checkbox"
                        id={country}
                        name="country"
                        value={country}
                        checked={selectedCountry.includes(country)}
                        onChange={() => handleSelect(country)}
                        onClick={(e) => e.stopPropagation()}
                      />
                      <label
                        htmlFor={country}
                        style={{ paddingLeft: "5px" }}
                        onClick={(e) => e.stopPropagation()}
                      >
                        {country}
                      </label>
                    </div>
                  ))}
              </div>
            </>
          )}
        </div>
      </div>
    </>
  );
}
